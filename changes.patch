diff --git a/data/pyproject.toml b/data/pyproject.toml
index 5917c51..a87811e 100644
--- a/data/pyproject.toml
+++ b/data/pyproject.toml
@@ -10,6 +10,8 @@ dependencies = [
     "dnspython==2.7.0",
     "sentry-sdk[celery]==2.27.0",
     "psycopg2-binary==2.9.10",
+    "pandas==2.2.3",
+    "openpyxl==3.1.3",
 ]
 
 [project.optional-dependencies]
diff --git a/data/tasks/dumps.py b/data/tasks/dumps.py
index 8cf4a23..03c0510 100644
--- a/data/tasks/dumps.py
+++ b/data/tasks/dumps.py
@@ -134,3 +134,27 @@ def dump_filtered_sirene(communes):
         json.dump(rows, f, ensure_ascii=False, indent=4)
 
     return len(rows)
+
+def dump_groupements_memberships():
+    if Path("dumps/groupements_memberships.json").exists():
+        return
+
+    url = "https://www.data.gouv.fr/fr/datasets/r/348cc004-22b4-4b12-9281-b00d4ccb1d88"
+    r = requests.get(url)
+    r.raise_for_status()
+
+    # Convert XLSX to JSON
+    import pandas as pd
+
+    # Read the XLSX file
+    df = pd.read_excel(r.content)
+    df_selected = df[[
+        "Nom du groupement",
+        "N° SIREN",
+        "Nom membre",
+        "Siren membre",
+        "Catégorie des membres du groupement",
+        ]
+    ]
+    with open("dumps/groupements_memberships.json", "w") as f:
+        json.dump(df_selected.to_dict(orient="records"), f, ensure_ascii=False, indent=4)
\ No newline at end of file
diff --git a/data/tasks/lib.py b/data/tasks/lib.py
index df9b665..8cf4a83 100644
--- a/data/tasks/lib.py
+++ b/data/tasks/lib.py
@@ -44,6 +44,13 @@ def iter_repertoire_structures():
         yield structure
 
 
+def iter_groupements_memberships():
+    with open("dumps/groupements_memberships.json") as f:
+        data = json.load(f)
+    for membership in data:
+        yield membership
+
+
 def iter_repertoire_collectivites():
     with open("dumps/collectivites.json") as f:
         data = json.load(f)
diff --git a/data/tasks/sync.py b/data/tasks/sync.py
index 1e433b2..202f468 100644
--- a/data/tasks/sync.py
+++ b/data/tasks/sync.py
@@ -22,6 +22,7 @@
     dump_filtered_sirene,
     dump_insee_communes,
     dump_perimetre_epci,
+    dump_groupements_memberships,
     reset_dila_issues,
 )
 from .lib import (
@@ -31,6 +32,7 @@
     iter_perimetre_epci,
     iter_repertoire_collectivites,
     iter_repertoire_structures,
+    iter_groupements_memberships,
     iter_sirene,
     normalize,
 )
@@ -67,6 +69,7 @@ def run():
     dump_repertoire_structures()
     dump_repertoire_collectivites()
     dump_perimetre_epci()
+    dump_groupements_memberships()
 
     communes = [{"_st_insee": x} for x in iter_insee_communes()]
 
@@ -90,6 +93,7 @@ def run():
     # Associate Repertoire data to communes
     associate_repertoire_to_communes(communes)
     associate_structures_to_communes(communes)
+    associate_memberships_to_communes(communes)
 
     compute_slug_for_communes(communes)
 
@@ -245,6 +249,7 @@ def run():
                 "st_eligible": st_eligible,
                 "st_active": st_active,
                 "structures": commune.get("_st_structures") or [],
+                "memberships": commune.get("_st_memberships") or [],
             }
         )
 
@@ -456,6 +461,28 @@ def associate_structures_to_communes(communes: list):
         # Remove duplicates
         commune["_st_structures"] = list(set(commune["_st_structures"]))
 
+def associate_memberships_to_communes(communes: list):
+    """Associate memberships to communes"""
+    structures_with_banatic_name = [x for x in iter_repertoire_structures() if x.get("Libelle_BANATIC")]
+    memberships = []
+    for structure in structures_with_banatic_name:
+        memberships.extend([{**x, "structure_id": structure.get("id")} for x in iter_groupements_memberships() if x.get("Nom du groupement") == structure.get("Libelle_BANATIC")])
+
+    # group by siren membre
+    memberships_by_siren = defaultdict(list)
+    for membership in memberships:
+        memberships_by_siren[membership.get("Siren membre")].append(membership)
+
+    for commune in communes:
+        commune["_st_memberships"] = []
+        # If the commune siren is in the memberships, add the memberships structure_id to the commune memberships
+        if commune.get("_st_siren") in memberships_by_siren:
+            commune["_st_memberships"] = [x.get("structure_id") for x in memberships_by_siren[commune.get("_st_siren")]]
+        elif commune.get("_st_epci", {}).get("siren") in memberships_by_siren:
+            commune["_st_memberships"] = [x.get("structure_id") for x in memberships_by_siren[commune.get("_st_epci", {}).get("siren")]]
+
+        # Remove duplicates
+        commune["_st_memberships"] = list(set(commune["_st_memberships"]))
 
 def compute_slug_for_communes(communes: list):
     """Create a unique slug for each commune"""
